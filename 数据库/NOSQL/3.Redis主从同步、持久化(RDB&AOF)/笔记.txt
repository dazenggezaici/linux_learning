redis主从同步：
redis服务启动后默认都为主库
	可以用> info replication来查看是主库还是从库
		...role:master...
	设置从库：  # 52主机作为51的从服务器
		> SLAVEOF 192.168.4.51 6351
			# slaveof 主库IP 主库端口
		> info replication
			...role:slave...
			# 查看主从信息
		> slave no one  # 取消从库属性，将主机还原为主库
		# 在命令行设置均为临时设置，重启服务就会还原
		修改配置文件，永久有效：
			vim /etc/redis/63*.conf
				slaveof 192.168.4.51 6351
				# 282 slaveof 主库IP 主库端口
				289 masterauth <master-password>
				# 如果主库有连接密码，则需要该选项，否则注释即可
哨兵服务：
	主库宕机时，从库自动升级为主库
	监视主从复制结构中的主库运行状态
	可以部署在除了主库服务器上的所有主机上
	# 该案例用54主机作为哨兵服务器：
		1、创建服务的主配置文件
			vim /etc/sentinel.conf  # 创建并修改sentinel.conf配置文件
				bind 0.0.0.0  # 在本机所有网卡发出监控信息
				port 26354  # 本机的26354端口
				sentinel monitor master0-51 192.168.4.51 6351 1
				# sentinel monitor 自定义主机名 主库IP 主库发布redis服务的端口
				sentinel auth-pass master0-51 123qqq...A
				# 如果主库有密码需要写该选项
		2、启动哨兵服务
			redis-sentinel /etc/sentinel.conf
		3、测试
			停用51的redis服务
持久化：
RDB：
AOF：
	RDB的升级版
	开启AOF功能：  # AOF优先级大于RDB
		vim /etc/redis/63*.conf
		673		appendonly yes
		677		appendfilename "appendonly.aof"
		/etc/init.d/redis_63* restart
	开启后写操作都回记录在：
		/var/lib/redis/63*/appendonly.aof
		# 以追加的方式记录
	安全开启aof:
		> config set appendonly yes
		> config rewrite
	# 这样rdb里的数据就不会丢失

Redis数据类型：
	string
	list
	hash
命令：
字符串常用操作：
	set
	mset  # 可以同时定义多个变量
	strlen  # 统计字符长度
	setrange  # 修改字符串中的个别字符，命令 key 从几开始 修改为
	append  # 在字符后追加新值而不是覆盖
	setbit  # 位存储，当数据只需要有两种状态时，可以用该存储，如是&否
	bitcount  # 统计位存储变量中1的个数
	decr  # 自减1，key不存在则赋值0再自减1
	decrby  # 在key后面可以加自减的数值，decrby key 30,key自减30
	mget  # 获取key的value，后面可以接多个key
	getrange  # 字符串切片，命令 key 开始位 结束位
	incr  # 自加1
	incrby  # 可自定义自加数值
	incrbyfloat  # 自加数值可为小数
list：
	先进后出
	lpush key value1 value2 ...  # 如果key已存在则追加写入
	type key  # 可以查看数据类型
	lrange key start stop  # 取列表中的值，第一个值的下标是0
		例：
		lpush key 1 2 3 4
		lrange key 0 -1  # 输出时是先进后出
			4  # 0下标就是最后一个存的值
			3
			2
			1  # -1下标就是第一个存进去的值
	lpop key  # 删除列表头元素，就是最后存入的值
	llen  # 获取list的值的个数
	lindex key index  # 输出列表中的一个值，index填下标
	lset key index value  # 修改列表中的某个值
	rpush key value  # 将值插入到列的末尾(就是比第一个插入的还要先插入)
	rpop key  # 删除队列的最后一个元素
hash：  # 类似python中的字典
	hset 变量名 key value  # 定义hash
	hmset 变量名 key1 value1 key2 value2 ...
	hget 变量名 key  # 会输出对应key的value 
	hmget 变量名 key1 key2 ...
	hkeys 变量名  # 输出所有key
	hgetall  # 输出所有key-value
	hvals  # 输出所有value
	hdel 变量名 key1 key2 ..  # 删除单(多)个key
	


























