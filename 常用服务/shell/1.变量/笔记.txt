shell脚本 --7天课时

history  # 查看历史命令，之前的和刚刚输入的所有
		/etc/proflie文件的HISTSIZE选项可以该需要保留历史命令的个数
			在用户家目录下的.bash_history文件是存放历史命令的（不包括当前缓存的命令）
		history -c  # 只是清除当前缓存的历史命令
			一般情况下要完全清除所有历史命令先history -c然后再把用户家目录下的.bash_history文件删除

[root@server0 opt]# ls
rh
[root@server0 opt]# ls > 1
注意：在重定向时，发现1这个文件不存在时会先创建1这个文件，然后在把ls输出的内容写入到1这个文件里，而这时候ls输出不再是rh，而是1和rh。
[root@server0 opt]# ls
1  rh
[root@server0 opt]# cat 1
1
rh
[root@server0 opt]#

>,>>,2>,&>
覆盖重定向，追加重定向，将错误信息覆盖重定向，将正确和错误信息都覆盖重定向
<  # 将<后方的参数输入给前面的命令，一般为文件，如：
	mail -s test root < 1.txt
	
{1..10}生成1-10的数字
执行脚本的方法
加执行权限
bash 脚本文件  # 新建一个bash的子进程,在子进程中解释脚本文件
source 脚本文件  # 这个是用当前的解释器解释脚本文件,之前看到有. jiaoben.sh,这里的.跟source是一个作用,意思是"source==."
root@server0
调试脚本:
	sh -x 脚本文件  # bash -x 脚本文件,也是可以的
系统变量:
	环境变量: $PWD,$USER,$SHELL  # 系统已经定义好的变量
	PS1,一级提示符[\u@\h \W]\$就是[root@server0 opt]#这个,PS2二级提示符>,交互式界面.
	预定义变量:$*,$#,$$,$?
		$*  # 所有$1,$2...$n全部列出
		$#  # 所有$1,$2...$n的数量
		$$  # 当前执行脚本的进程号
		$?  # 输出0则运行正常,否则就是运行错误
		$0  # 当前脚本名称
	位置变量:$1,$2,$3
	查看所有环境变量:env
	查看所有变量:set
	
''单引号才能取消特殊符号的特殊定义,跟\差不多,单引用于一段,反斜杠用于单个字符
``反撇号:将命令的输出结果当作参数
$():将命令的输出结果当作参数

read -p "请输入xxx" u  # 这一段就是进入交互式界面跟py的u=input("请输入xxx")一致
stty -echo  # 屏蔽信息回显
stty echo  # 恢复信息回显

export 变量=变量值  # 定义全局变量



