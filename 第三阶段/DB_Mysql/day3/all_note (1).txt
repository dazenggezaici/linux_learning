ftp://172.40.50.117/2018/soft  软件
ftp://172.40.50.117/nsd1812/all_note.txt  随堂文档

vns  172.40.50.117  7000

第三阶段 课程内容 
一、数据库管理15天  数据管理员    DBA
1.1  RDBMS:  MySQL 10天
1.2  NoSQL:  Redis 3天  和 MongoDB 2天

二、安全与监控 6天
2.1 安全 ： 系统安全  服务安全  数据安全  网络安全 
2.2 监控 :  zabbix服务的使用


庞丽静  静静
panglj@tedu.cn 
++++++++++++++++DBA1_DAY03+++++++++

   一台车 
   轮胎  备胎  车架子  真皮座椅 内饰  方向盘  发动机*   

一、MySQL存储引擎
	1.1 MySQL存储引擎介绍
		1.1.1 MySQL体系结构 （8个组件）
		管理工具： MySQL自带的命令 
		连接池： 验证用户连接和检查系统资源
		SQL接口： 把sql命令传给mysqld进程处理
		分析器： 检查sql命令语法
		优化器： 对执行的sql命令优化
		查询缓存： 存储查找过的数据(8MB 从物理内存划分出来的)
		存储引擎：处理表的处理器，不同的存储引擎有不同的功能和
			  数据存储方式
		文件系统 ： 机器的硬盘

		1.1.2 存储引擎介绍 ?

	1.2 查看存储引擎
		1.2.1 查看已有表的使用存储引擎
			mysql> use userdb;
			mysql> show create table 表名\G;
			mysql> show  create table  user\G;


		1.2.1 查看数据库服务默认使用的存储引擎
		    	mysql> show engines;
	
		1.3 修改存储引擎
			1.3.1 修改数据库服务默认使用的存储引擎
				]# systemctl  stop mysqld						     ]# vim /etc/my.cnf
				  [mysqld]
				    default-storage-engine=myisam
				 :wq
				]# systemctl  start mysqld
				]# mysql -uroot -p密码
				mysql>  show engines;
				
			1.3.2 修改表使用的存储引擎
				mysql> alter table  t7 engine=myisam;

			1.3.3 建表时指定表使用的存储引擎 
				create  table t8 (name char(10))
				engine=innodb;

	1.4 常用存储引擎特点
		1.4.1 MYISAM存储引擎特点
			支持表级锁
			不支持外键、事务、事务回滚
			表文件个数
				t3.frm  t3.MYD  t3.MYI

		1.4.2 INNODB存储引擎特点
			支持外键 
			支持行级锁
			支持事务和事务回滚
			事务特点
			表文件个数 
				t6.frm  t6.ibd

	        1.4.3 术语解释	
			外键
			行级锁
			表级锁
			事务	
			事务回滚

	1.5 工作中建表时，如何决定表使用那种存储引擎？
	
二、数据导入导出
	2.0  数据导入导出默认检索目录
		2.0.1 查看默认检索目录名称
			mysql> show variables  like  "secure_file_priv";
			+------------------+-----------------------+
			| Variable_name    | Value                 |
			+------------------+-----------------------+
			| secure_file_priv | /var/lib/mysql-files/ |
			+------------------+-----------------------+
		2.0.2  修改默认检索目录名称
			]# mkdir  /mydata
  			]# chown  mysql  /mydata
  			]#  vim /etc/my.cnf
	    			[mysqld]
				secure_file_priv="/mydata"
			:wq

			]# systemctl  stop mysqld
			]# systemctl  start mysqld
			]# mysql -uroot -p123qqq...A
			mysql> show variables  like  "secure_file_priv";

	2.1  数据导入：把系统文件的内容存储到数据库的表里
		2.1.1 命令格式
                 mysql>  load  data  ifile  "目录名/文件名" into table
			 数据库名.表名 FIELDS TERMINATED BY   "分隔符"
			 LINES TERMINATED BY   "\n";

		2.1.2 步骤
			1 把系统文件拷贝到检索目录下
			2 根据导入文件的内容创建表
			3 执行数据导入命令

		2.1.3 例子
mysql> create database userdb;

mysql> create  table  userdb.user(
    -> username char(50),
    -> password char(1),
    -> uid int,
    -> gid int,
    -> comment  char(150),
    -> homedir  char(180),
    -> shell  char(50)
    -> );

mysql> load data infile "/mydata/passwd" into table userdb.user 
    -> fields terminated by ":" lines terminated by "\n";

mysql> alter table userdb.user  add 
    -> id int  primary key  auto_increment first;

mysql> select  * from  userdb.user;

休息到 10：15 

	2.2  数据导出：把数据库的表里的记录存放到系统文件
		2.2.1 命令格式
		mysql> SQL查询 into   outfile   "目录名/文件名";
		
		mysql> SQL查询 into   outfile   "目录名/文件名"
		       fields  terminated   by   "列分隔符"
		       lines terminated   by   "行分隔符";

      		2.2.2 例子
mysql> select * from  userdb.user  into outfile "/mydata/a1.txt";

mysql> select username,shell from  userdb.user  
       into outfile "/mydata/a2.txt";

mysql> select username,shell from  userdb.user where id<=3  
       into outfile "/mydata/a3.txt"  
       fields terminated  by  "#"  lines terminated  by  "???";

]# ls /mydata

]# vim /mydata/a1.txt
]# vim /mydata/a2.txt
]# vim /mydata/a3.txt
                       练习到 10:38
三、管理表记录
	3.1 插入表记录insert into
	 	1 向表中插入1条记录给所有字段赋值
		  insert into  库名.表名  valuse(字段值列表);
mysql> insert into  userdb.user 
values
(43,"bob","x",2000,2000,"test user","/home/bob","/bin/bash");

		2 向表中插入多条记录给所有字段赋值
		   2.1 命令格式 
                   insert into  库名.表名
		   values
		   (字段值列表),(字段值列表),(字段值列表);
		   2.2 例子
			mysql> insert into  userdb.user 
				values
	(443,"lili","x",2000,2000,"test user","/home/bob","/bin/bash"),
	(44,"lucy","x",2000,2000,"test user","/home/bob","/bin/bash");

		3 向表中插入1条记录给个别字段赋值
		   3.1 命令格式
			insert into  库名.表名(字段名列表)values(值列表);
		   3.2 例子
			mysql> insert  into userdb.user(username,shell) 
       			values("jack","/sbin/nologin");

		4 向表中插入多条记录给个别字段赋值
		  4.1 命令格式
			insert into  库名.表名(字段名列表)
			values(值列表),(值列表),(值列表);
		  4.2 例子
			insert  into userdb.user(username,shell)
			values
			("jack","/sbin/nologin"),
			("jerry","/sbin/nologin"),
			("alice","/sbin/nologin");

	3.2 查询表记录
		3.2.1 命令格式
		      select  字段名列表 from 库名.表名 [where 条件]；

		2.2.2 例子
mysql> select  * from userdb.user;
mysql> select  username,homedir from userdb.user where id <=2;
mysql> select  * from userdb.user where id <=2;

休息到 11：15

	3.3  更新表记录 update
		3.3.1 命令格式
		update  库名.表名 set 字段名=值，字段名=值 【where 条件】；
		
		3.3.2 例子
		mysql> update  userdb.user set password="a" ;

		mysql> update  userdb.user set password="x" 
		       where username="root" ;
	3.4 删除表记录 
		3.4.1 命令格式
			delete from 库名.表名【 where 条件 】;
		3.4.2 例子
		mysql> select  * from userdb.user where username="bob";
		mysql> delete from userdb.user;

四、匹配条件 （select  update  delete）
	4.1 基本匹配条件
	    4.1.1 数值比较 >  >=  <  <=  =  != 
			where  字段名 符号  数字
		select  name ,uid  from user where uid <= 10;
		select username,uid,gid from user where uid = gid;
		select  name ,uid  from user where id = 10;

	    4.1.2  字符比较 =  !=
			where  字段名 符号 "字符串"；
		select username,shell from user where  shell!="/bin/bash";
		select username from user where  username="root";

	   4.1.3 匹配空/非空
			where  字段名 is null;
			where  字段名 is not null;
		select username,gid from user where gid is null;
		select username,gid from user where gid is not  null;

	   4.1.4 逻辑匹配 (多个判断条件)
		 and  逻辑与 多个判断条件必须同时成立
		 or   逻辑或 多个判断条件某一条件成立即可
		 ! 或 not 逻辑非  取反
select  * from user where  username="bin"  and uid=3 and shell="/bin/bash";
select  * from user where  username="root"  and uid=0 ;
  
select  * from user where  username="bin"  or uid=3 or shell="/bin/bash";
	
	 4.1.5 范围内匹配/去重显示
		in  			在...里
		not 			不在...里
		between ....and... 	在...之间
		disinct  		去重显示

		select username from user 
			where username in ("adm","sync","root","mysql");

		select username,uid from user 
		 	where uid in (11,29,1000,33,7);

		select username,shell from user 
			where shell not in ("/bin/bash","/sbin/nologin");

		select  * from user where  id between 5 and 10;
	
		select  distinct  shell  from user;
		select  distinct  gid  from user;
		() 提高判断优先级
	4.2 高级匹配条件
		4.2.1 模糊查询 like
			where 字段名  like   '通配符';
			_  匹配单个字符
			%  匹配0~N个字符
		  select username from user where  username like '____';
		  select username from user where  username like '_____';
		  select username from user where  username like '%a%';
		  select username from user where  username like '__%__';

		4.2.2 正则表达式
			元字符  ^ $  . *  []
			where 字段名  regexp   '正则表达式’;

	   select username , uid  from user  where  uid  regexp '^....$';
	   select username   from user  where  username  regexp 't$';
	   select username   from user  where  username  regexp '^r.*t$';
	
           insert into user(username)
	      values("2yaya"),("ya5ya"),("yay8a"),("yaya7");
	
           select username   from user  where  username  regexp '[0-9]';
		4.2.3  四则运算
		       计算符号  +  -  *  /  %

		update user set gid=gid+1 where id <= 5;
	
		select username,uid+gid xjz  
                       from user where  username="root";

		alter table  user add age tinyint  default 29  
		      after username;

		select username,2019-age  csnf from 
                      user where  username="root";

		() 提高执行的优先级

		  select username,uid,gid,(uid+gid)/2  pjz from 
			user where username="bin";

	4.3 操作查询结果
		4.3.1 聚集函数(mysql服务软件自带的对数据做统计的命令)
			avg(字段名)			//统计字段平均值
			sum(字段名) 			//统计字段之和
			min(字段名) 			//统计字段最小值
			max(字段名) 			//统计字段最大值
			count(字段名) 			//统计字段值个数
			select  avg(uid)  from user ;
			select  avg(uid)  from user where id  <=10;
	
			select  sum(uid)  from user;
			select  min(uid) from user where shell!="/bin/bash";
			select  max(uid) from user where shell!="/bin/bash";

		select count(username) from user where shell!="/bin/bash";
		select count(username) from user;
		select count(*) from user;

		练习10分钟到 15：32  休息到 

		4.3.2 查询结果排序 order by  
		      SQL查询  order   by   字段名   [ asc | desc ];

			select username,uid from user 
				where uid between 10 and 1000 
				order  by  uid;

			select username,uid from user 
				where uid between 10 and 1000 
				order  by  uid desc;

		4.3.3 查询结果分组  group by  字段名

			select shell from user group by shell;

			select shell from user where  uid <=1000 
				group by shell;

		4.3.4 查询结果过滤 having 
			SQL查询   having   条件表达式;
			SQL查询   where   条件   having   条件表达式;
			SQL查询   group   by   字段名   having   条件表达式;
select username from user where shell!="/bin/bash" having username="gdm";
select username from user  where uid <=1000 and   username="gdm";
select username from user  where uid <=1000 having username="gdm";
			select shell from  user where shell!="/bin/bash" 
				group by shell having shell="/bin/sync";

	   4.3.5 限制查询结果显示行数limit
			SQL查询  limit  N; 	//显示查询结果前N条记录
                        SQL查询  limit  N,M; 	//显示指定范围内的查询记录

	   select  * from user where  uid >=10 and  uid<=500 limit 3;

	   select  id,username,homedir from user 
		 where  uid >=10 and  uid<=500 limit 3,3;
		 
		select username,uid,homedir from user where uid >1000  
			order by  uid  desc  limit 1;

	练习 10分钟 到 16：15  休息到 16：30








		练习到 15：45；










